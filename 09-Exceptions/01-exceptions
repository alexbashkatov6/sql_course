DROP FUNCTION IF EXISTS get_season;
CREATE FUNCTION get_season(month_number int) RETURNS text AS $$
DECLARE
	season text;
BEGIN
	IF month_number NOT BETWEEN 1 AND 12 THEN
		RAISE EXCEPTION 'Invalid month %', month_number USING HINT = 'Allowed from 1 to 12', ERRCODE = 12882;
	END IF;
	IF month_number BETWEEN 3 AND 5 THEN
		season = 'spring';
	ELSIF month_number BETWEEN 6 AND 8 THEN
		season = 'summer';
	ELSIF month_number BETWEEN 9 AND 11 THEN
		season = 'autumn';
	ELSE
		season = 'winter';
	END IF;
	RETURN season;
END
$$ LANGUAGE plpgsql;

SELECT get_season(13);

CREATE OR REPLACE FUNCTION get_season_caller() returns text AS $$
BEGIN
	RETURN get_season(13);
EXCEPTION WHEN SQLSTATE '12882' THEN
	RAISE INFO 'A problem';
	RETURN NULL;
END
$$ LANGUAGE plpgsql;

SELECT get_season_caller();

CREATE OR REPLACE FUNCTION get_season_caller2(month_number int) returns text AS $$
DECLARE
	err_ctx text;
	err_msg text;
	err_details text;
	err_code text;
BEGIN
	RETURN get_season(month_number);
EXCEPTION WHEN SQLSTATE '12882' THEN
	GET STACKED DIAGNOSTICS
		err_ctx = PG_EXCEPTION_CONTEXT,
		err_msg = MESSAGE_TEXT,
		err_details = PG_EXCEPTION_DETAIL,
		err_code = RETURNED_SQLSTATE;
	RAISE INFO 'My custom handler:';
	RAISE INFO 'Error msg: %', err_msg;
	RAISE INFO 'Error details: %', err_details;
	RAISE INFO 'Error code: %', err_code;
	RAISE INFO 'Error context: %', err_ctx;
	RETURN NULL;
END
$$ LANGUAGE plpgsql;

SELECT get_season_caller2(13);
